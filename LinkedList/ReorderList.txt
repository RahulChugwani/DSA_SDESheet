// Problem Link:
https://leetcode.com/problems/reorder-list/

You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.




// Code:

class Solution {
public:
    void reverseList( ListNode** node){
        
        ListNode* prev, *curr, *next;
        prev = NULL;
        curr = *node;
        
        while(curr){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        
        *node = prev;
        
    }
    void reorderList(ListNode* head) {
        
        ListNode* slow, *fast;
        slow = head; 
        fast = slow->next;
        
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        ListNode* head1 = head;
        ListNode* head2 = slow->next;
        slow->next = NULL;
        
        reverseList(&head2);
        
        ListNode* dummy = new ListNode(0);
        ListNode* curr = dummy;
        
        while( head1 || head2){
            
            if(head1){
                curr->next = head1;
                curr = curr->next;
                head1 = head1->next;
            }
            
            if(head2){
                curr->next = head2;
                curr = curr->next;
                head2 = head2->next;
            }
            
        }
        
        
        head = dummy->next;
    }
};