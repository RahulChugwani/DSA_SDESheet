Complete the function to find spiral order traversal of a tree. For below tree, function should return 1, 2, 3, 4, 5, 6, 7.
Input:
           10
         /     \
        20     30
      /    \
    40     60

Output: 10 20 30 60 40 

Your Task:
The task is to complete the function findSpiral() which takes root node as input parameter and returns the elements in spiral form of level order traversal as a list. 
The newline is automatically appended by the driver code.
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).



//Code: 

vector<int> findSpiral(Node *root)
{
    //Your code here
    if( root == NULL)
        return vector<int>();
        
    stack<Node*> s1;  //for right to left level travel //push left first in s1;
    stack<Node*> s2;    //for left to right level  //push right first in s2;
    
    s1.push(root);
    
    vector<int> res;
    while( !s1.empty() || !s2.empty()){
        
        while( !s1.empty()){
            
            Node* curr = s1.top();
            s1.pop();
            
            res.push_back(curr->data);
            
            if(curr->right)
                s2.push(curr->right);
            if(curr->left)
                s2.push(curr->left);
        }
        
        while( !s2.empty()){
            
            Node* curr = s2.top();
            s2.pop();
            
            res.push_back(curr->data);
            
            if(curr->left)
                s1.push(curr->left);
            if(curr->right)
                s1.push(curr->right);
        }
    }
    
    return res;
    
}