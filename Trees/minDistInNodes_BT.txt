// Problem Link:
https://practice.geeksforgeeks.org/problems/min-distance-between-two-given-nodes-of-a-binary-tree/1


Given a binary tree and two node values your task is to find the minimum distance between them.

Example 1:

Input:
        1
      /  \
     2    3
a = 2, b = 3
Output: 2
Explanation: The tree formed is:
       1
     /   \ 
    2     3
We need the distance between 2 and 3.
Being at node 2, we need to take two
steps ahead in order to reach node 3.
The path followed will be:
2 -> 1 -> 3. Hence, the result is 2



// Code:

bool findPath(Node* root, int n, vector<Node*>& path){
    
    if(root == NULL)
        return false;
    
    path.push_back(root);
    
    if(root->data == n)
        return true;
        
    if( (root->left && findPath(root->left, n, path)) || (root->right && findPath(root->right, n, path)) )
        return true;
        
    path.pop_back();
    return false;
    
}

int findDistwithLCA(Node* lca, int nodeVal, int dist){
    
    if(lca == NULL)
        return -1;
    
    if(lca->data == nodeVal)
        return dist;
    
    int leftDist = findDistwithLCA(lca->left, nodeVal, dist+1);
    
    if(leftDist != -1)
        return leftDist;
        
    return findDistwithLCA(lca->right, nodeVal, dist+1);
    
}

int findDist(Node* root, int a, int b) {     // main_function
    // Your code here
    vector<Node*> path1;
    vector<Node*> path2;
    
    if( !findPath(root, a, path1) || !findPath(root, b, path2) )
        return -1;
        
    int i;
    
    for( i=0; i < path1.size() && i < path2.size(); i++){
        if( path1[i] != path2[i])
            break;
    }
    
    Node* LCA = path1[i-1];
    
    
    int d1 = findDistwithLCA(LCA, a, 0);
    int d2 = findDistwithLCA(LCA, b, 0);
    
    return d1+d2;
}
