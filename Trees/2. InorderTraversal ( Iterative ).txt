// Problem Link:
https://practice.geeksforgeeks.org/problems/inorder-traversal-iterative/1/


Given a binary tree. Find the inorder traversal of the tree without using recursion.
Example 1
Input:
           1
         /    \
       2       3
      /   \
    4     5
Output: 4 2 5 1 3
Explanation:
Inorder traversal (Left->Root->Right) of 
the tree is 4 2 5 1 3.

Example 2
Input:
            8
          /   \
            1      5
             \    /  \
             7   10   6
             \  /
          10 6
Output: 1 7 10 8 6 10 5 6
Explanation:
Inorder traversal (Left->Root->Right) 
of the tree is 1 7 10 8 6 10 5 6.




// Code:

/* Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;
};*/
class Solution {
public:
    vector<int> inOrder(Node* root)
    {
        if( root == NULL)
            return vector<int>();
        
        vector<int> ans;
        
        stack<Node*> st;
        Node* temp = root;
        
        while( temp != NULL || !st.empty()){
            
            while(temp){
                st.push(temp);
                temp = temp->left;
            }
            
            temp = st.top();
            st.pop();
            
            ans.push_back( temp->data);
            
            temp = temp->right;
            
        }
        
        return ans;
        
    }
};