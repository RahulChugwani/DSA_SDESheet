//Problem Link:
https://leetcode.com/problems/binary-tree-maximum-path-sum/

A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any path.

Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Example 2:
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.


// Code:

class Solution {
public:
    int maxSumUtil(TreeNode* root, int& res){
        
        if(root == NULL)
            return 0;
        
        int leftsum = maxSumUtil(root->left, res);  //calc leftsum
        int rightsum = maxSumUtil(root->right, res);    //calc rightsum
        
        int ms = max( max(leftsum, rightsum) + root->val, root->val ) ;   //case1: where curr node is a part of maxpath sum
        int m2 = max( ms, (leftsum + rightsum + root->val) );       //case2: where curr node is a root of maxpath sum
                                                                    //i.e this path can't go up.
        
        res = max(res, m2);
       
        // we are returning here "ms" value only bcoz it's in the path of maxsum whereas case2 is for root as curr node.
        // and ms value will be only passed to it's parent node.
        return ms;
    }
    
    int maxPathSum(TreeNode* root) {
        
        int res = INT_MIN;
        maxSumUtil(root, res);
        
        return res;
        
    }
};