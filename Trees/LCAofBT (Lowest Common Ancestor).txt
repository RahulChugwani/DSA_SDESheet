Problem Link: 
https://practice.geeksforgeeks.org/problems/lowest-common-ancestor-in-a-binary-tree/1

Given a Binary Tree with all unique values and two nodes value n1 and n2. The task is to find the lowest common ancestor of the given two nodes. We may assume that either both n1 and n2 are present in the tree or none of them is present. 

Example 1:

Input:
n1 = 2 , n2 =  3
     1
   /  \
  2    3
Output: 1
Explanation:
LCA of 2 and 3 is 1.
Example 2:

Input:
n1 = 3 , n2 = 4
         5
        /
       2
     /  \
    3    4
Output: 2
Explanation: 
LCA of 3 and 4 is 2. 



//Code :

class Solution
{
    public:
    bool findPath(Node* root, vector<Node*>& path, int n){
        
        if( root == NULL)
            return false;
        
        path.push_back(root);
        
        if(root->data == n){
            return true;
        }
        
        if( (root->left && findPath(root->left, path, n)) || (root->right && findPath(root->right, path, n)) )
            return true;
        
        path.pop_back();
        return false;
            
    }
    //Function to return the lowest common ancestor in a Binary Tree.
    Node* lca(Node* root ,int n1 ,int n2 )
    {
        vector<Node*> path1;
        vector<Node*> path2;
       
       
        Node* temp = NULL;
        
        if( !findPath(root, path1, n1) || !findPath(root, path2, n2))
            return temp;
        
        int i;
        for( i=0; i < path1.size() && i < path2.size(); i++){
            
            if( path1[i] != path2[i])
            {
                break;
            }
            
        }
        
        return path1[i-1];
       
    }
};