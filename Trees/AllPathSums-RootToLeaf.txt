// Problem Link:
https://leetcode.com/problems/path-sum-ii/

Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path's sum equals targetSum.
A leaf is a node with no children.

Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]


// Code:

class Solution {
public:
    void pathSumUtil( TreeNode* root, int targetSum, vector<int>& currpath, vector<vector<int>>& result){
        
        if(root == NULL)
            return;
        
        currpath.push_back(root->val);
        
        if( root->val == targetSum && !root->left && !root->right){
            result.push_back(currpath);
        }
        
        pathSumUtil(root->left, targetSum - root->val, currpath, result);
        pathSumUtil(root->right, targetSum - root->val, currpath, result);
        
        currpath.pop_back();
        
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        
        vector<vector<int>> result;
        vector<int> currpath;
        
        pathSumUtil(root, targetSum, currpath, result);
        
        return result;
        
    }
};