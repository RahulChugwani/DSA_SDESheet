// Problem Link:
https://leetcode.com/problems/network-delay-time/

You are given a network of n nodes, labeled from 1 to n. 
You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. 
If it is impossible for all the n nodes to receive the signal, return -1.

Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1

Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1



// Code:

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        vector<vector<pair<int,int>>> adj(n+1);
        
        for( int i=0; i < times.size(); i++){
            vector<int> temp = times[i];
            adj[temp[0]].push_back({temp[1], temp[2]});
        }
        
        priority_queue< pair<int, int>, vector<pair<int,int>>, greater<pair<int, int>> > pq;
        vector<int> dist(n+1 , INT_MAX);
        
        int src = k;
        dist[src] = 0;
        pq.push({0, src});
        
        while( !pq.empty()){
            
            pair<int,int> temp = pq.top();
            pq.pop();
            
            int node = temp.second; 
            int parent_dist = temp.first;
            
            for(auto x: adj[node]){
                
                if( dist[x.first] > (parent_dist + x.second) ){
                    dist[x.first] = (parent_dist + x.second);
                    pq.push({dist[x.first], x.first});   
                }
            }   
        }
        
        
        int res = INT_MIN;
        for( int i=1; i <= n; i++)
            res = max(res, dist[i]);
        
        return res == INT_MAX ? -1 : res;
    }
};